/*Author: Justin Davis
date: 3/12/2020
leet code challenge - 

we are given a list nums of integers representing a list compressed with run-length encoding.

consider each adjacent pair of elements [freq, val] = [nums[2*i], nums[2*i+1]] (with i >= 0).  for each such pair, there are freq elements with value val concatenated in a sublist. concatenate all the sublists from left to right to generate the decompressed list.

return the decompressed list.

 

example 1:

input: nums = [1,2,3,4]
output: [2,4,4,4]
explanation: the first pair [1,2] means we have freq = 1 and val = 2 so we generate the array [2].
the second pair [3,4] means we have freq = 3 and val = 4 so we generate [4,4,4].
at the end the concatenation [2] + [4,4,4] is [2,4,4,4].
example 2:

input: nums = [1,1,2,3]
output: [1,3,3]
 

constraints:

2 <= nums.length <= 100
nums.length % 2 == 0
1 <= nums[i] <= 100
accepted
31,846
submissions
37,635

Leet Code graded submission faster than 83.27% of submissions
*/

public class Solution {
    public int[] DecompressRLElist(int[] nums)
    {
        List<int> nums2 = new List<int>();
        for (int i = 0; i < nums.Length; i+=2)
        {
            for(int j = 0; j < nums[i]; j++)
            {
                nums2.Add(nums[i+1]);
            }
        }
        int[] array = nums2.ToArray();
        return array;
    }
}